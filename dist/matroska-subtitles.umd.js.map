{"version":3,"file":"matroska-subtitles.umd.js","sources":["../src/subtitle-parser-base.js","../src/subtitle-parser.js","../src/subtitle-stream.js"],"sourcesContent":["import { PassThrough } from 'readable-stream'\r\nimport { EbmlStreamDecoder, EbmlTagId } from 'ebml-stream'\r\nimport { inflateSync } from 'zlib'\r\n\r\nconst SSA_TYPES = new Set(['ssa', 'ass'])\r\nconst SSA_KEYS = ['readOrder', 'layer', 'style', 'name', 'marginL', 'marginR', 'marginV', 'effect', 'text']\r\n\r\nfunction getData (chunk, id) {\r\n  const el = chunk.Children.find(c => c.id === id)\r\n  return el ? el.data : undefined\r\n}\r\n\r\nexport class SubtitleParserBase extends PassThrough {\r\n  constructor () {\r\n    super()\r\n\r\n    this.subtitleTracks = new Map()\r\n    this.timecodeScale = 1\r\n\r\n    this._currentClusterTimecode = null\r\n\r\n    this.decoder = new EbmlStreamDecoder({\r\n      bufferTagIds: [\r\n        EbmlTagId.TimecodeScale,\r\n        EbmlTagId.Tracks,\r\n        EbmlTagId.BlockGroup,\r\n        EbmlTagId.AttachedFile\r\n      ]\r\n    })\r\n\r\n    this.decoder.on('data', this.parseEbmlSubtitles.bind(this))\r\n  }\r\n\r\n  parseEbmlSubtitles (chunk) {\r\n    // Segment Information\r\n    if (chunk.id === EbmlTagId.TimecodeScale) {\r\n      this.timecodeScale = chunk.data / 1000000\r\n    }\r\n\r\n    // Assumption: This is a Cluster `Timecode`\r\n    if (chunk.id === EbmlTagId.Timecode) {\r\n      this._currentClusterTimecode = chunk.data\r\n    }\r\n\r\n    if (chunk.id === EbmlTagId.Tracks) {\r\n      for (const entry of chunk.Children.filter(c => c.id === EbmlTagId.TrackEntry)) {\r\n        // Skip non subtitle tracks\r\n        if (getData(entry, EbmlTagId.TrackType) !== 0x11) continue\r\n\r\n        const codecID = getData(entry, EbmlTagId.CodecID) || ''\r\n        if (codecID.startsWith('S_TEXT')) {\r\n          const track = {\r\n            number: getData(entry, EbmlTagId.TrackNumber),\r\n            language: getData(entry, EbmlTagId.Language),\r\n            type: codecID.substring(7).toLowerCase()\r\n          }\r\n\r\n          const name = getData(entry, EbmlTagId.Name)\r\n          if (name) {\r\n            track.name = name\r\n          }\r\n\r\n          const header = getData(entry, EbmlTagId.CodecPrivate)\r\n          if (header) {\r\n            track.header = header.toString()\r\n          }\r\n\r\n          // TODO: Assume zlib deflate compression\r\n          const compressed = entry.Children.find(c =>\r\n            c.id === EbmlTagId.ContentEncodings &&\r\n            c.Children.find(cc =>\r\n              cc.id === EbmlTagId.ContentEncoding &&\r\n              cc.Children.find(ccc => ccc.id === EbmlTagId.ContentCompression)))\r\n\r\n          if (compressed) {\r\n            track._compressed = true\r\n          }\r\n\r\n          this.subtitleTracks.set(track.number, track)\r\n        }\r\n      }\r\n\r\n      this.emit('tracks', Array.from(this.subtitleTracks.values()))\r\n    }\r\n\r\n    if (chunk.id === EbmlTagId.BlockGroup) {\r\n      const block = chunk.Children.find(c => c.id === EbmlTagId.Block)\r\n\r\n      if (block && this.subtitleTracks.has(block.track)) {\r\n        const blockDuration = getData(chunk, EbmlTagId.BlockDuration)\r\n        const track = this.subtitleTracks.get(block.track)\r\n\r\n        const payload = track._compressed\r\n          ? inflateSync(Buffer.from(block.payload))\r\n          : block.payload\r\n\r\n        const subtitle = {\r\n          text: payload.toString('utf8'),\r\n          time: (block.value + this._currentClusterTimecode) * this.timecodeScale,\r\n          duration: blockDuration * this.timecodeScale\r\n        }\r\n\r\n        if (SSA_TYPES.has(track.type)) {\r\n          // extract SSA/ASS keys\r\n          const values = subtitle.text.split(',')\r\n\r\n          // ignore read-order, and skip layer if ssa\r\n          for (let i = track.type === 'ssa' ? 2 : 1; i < 8; i++) {\r\n            subtitle[SSA_KEYS[i]] = values[i]\r\n          }\r\n\r\n          subtitle.text = values.slice(8).join(',')\r\n        }\r\n\r\n        this.emit('subtitle', subtitle, block.track)\r\n      }\r\n    }\r\n\r\n    // Parse attached files, mainly to allow extracting subtitle font files.\r\n    if (chunk.id === EbmlTagId.AttachedFile) {\r\n      this.emit('file', {\r\n        filename: getData(chunk, EbmlTagId.FileName),\r\n        mimetype: getData(chunk, EbmlTagId.FileMimeType),\r\n        data: getData(chunk, EbmlTagId.FileData)\r\n      })\r\n    }\r\n  }\r\n}\r\n","import { EbmlTagId } from 'ebml-stream'\r\nimport { SubtitleParserBase } from './subtitle-parser-base'\r\n\r\nexport class SubtitleParser extends SubtitleParserBase {\r\n  constructor () {\r\n    super()\r\n\r\n    this.decoder.on('data', (chunk) => {\r\n      if (chunk.id === EbmlTagId.Tracks) {\r\n        // stop decoding if no subtitle tracks are present\r\n        if (this.subtitleTracks.size === 0) this.end()\r\n      }\r\n    })\r\n  }\r\n\r\n  _write (chunk, _, callback) {\r\n    this.decoder.write(chunk)\r\n    callback(null, chunk)\r\n  }\r\n}\r\n","import { SubtitleParserBase } from './subtitle-parser-base'\r\n\r\nexport class SubtitleStream extends SubtitleParserBase {\r\n  constructor (prevInstance) {\r\n    super()\r\n\r\n    if (prevInstance instanceof SubtitleParserBase) {\r\n      prevInstance.once('drain', () => prevInstance.end())\r\n\r\n      // copy previous metadata\r\n      this.subtitleTracks = prevInstance.subtitleTracks\r\n      this.timecodeScale = prevInstance.timecodeScale\r\n\r\n      // may not be at ebml tag offset\r\n      this.unstable = true\r\n    }\r\n    this.on('data', this._ondata.bind(this))\r\n  }\r\n\r\n  _ondata (chunk) {\r\n    if (this.unstable) {\r\n      // the ebml decoder expects to see a tag, so we won't use it until we find a cluster\r\n      for (let i = 0; i < chunk.length - 12; i++) {\r\n        // cluster id\r\n        if (chunk[i] === 0x1f && chunk[i + 1] === 0x43 && chunk[i + 2] === 0xb6 && chunk[i + 3] === 0x75) {\r\n          // length of cluster size tag\r\n          const len = 8 - Math.floor(Math.log2(chunk[i + 4]))\r\n          // first tag in cluster is cluster timecode\r\n          if (chunk[i + 4 + len] === 0xe7) {\r\n            // okay this is probably a cluster\r\n            this.unstable = false\r\n            this.decoderWrite(chunk.slice(i))\r\n            break\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      this.decoderWrite(chunk)\r\n    }\r\n  }\r\n\r\n  decoderWrite (chunk) {\r\n    // passthrough stream should allow chained streams to continue on error\r\n    try {\r\n      this.decoder.write(chunk)\r\n    } catch (err) {\r\n      console.warn('[matroska-subtitles] EBML stream decoding error')\r\n    }\r\n  }\r\n}\r\n"],"names":["SSA_TYPES","Set","SSA_KEYS","getData","chunk","id","el","Children","find","c","data","undefined","SubtitleParserBase","PassThrough","constructor","subtitleTracks","Map","timecodeScale","_currentClusterTimecode","decoder","EbmlStreamDecoder","bufferTagIds","EbmlTagId","TimecodeScale","Tracks","BlockGroup","AttachedFile","on","parseEbmlSubtitles","bind","Timecode","entry","filter","TrackEntry","TrackType","codecID","CodecID","startsWith","track","number","TrackNumber","language","Language","type","substring","toLowerCase","name","Name","header","CodecPrivate","toString","compressed","ContentEncodings","cc","ContentEncoding","ccc","ContentCompression","_compressed","set","emit","Array","from","values","block","Block","has","blockDuration","BlockDuration","get","payload","inflateSync","Buffer","subtitle","text","time","value","duration","split","i","slice","join","filename","FileName","mimetype","FileMimeType","FileData","SubtitleParser","size","end","_write","_","callback","write","SubtitleStream","prevInstance","once","unstable","_ondata","length","len","Math","floor","log2","decoderWrite","err","console","warn"],"mappings":"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"}